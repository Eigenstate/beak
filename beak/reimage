#!/usr/bin/env python
"""
Does reimaging as a standalone python script
"""
import argparse
import os
import subprocess
import sys
from beak.reimagers import reimage, reimage_mdstep

if __name__ == "__main__":
    # Process args
    parser = argparse.ArgumentParser(prog="reimage")
    parser.add_argument("--every",
                        dest="skip",
                        default=1,
                        type=int,
                        metavar="<N>",
                        help="Save every Nth frame. Defaults to all frames")

    parser.add_argument("--equilibration",
                        dest="alleq",
                        default=False,
                        action="store_true",
                        help="Include equilibration trajectories "
                        "in final reimaged file. Defaults to False.")

    parser.add_argument("--align",
                        dest="align",
                        default=False,
                        action="store_true",
                        help="Align frames to input coordinates.")

    parser.add_argument("--strip",
                        dest="strip",
                        default=None,
                        type=str,
                        metavar="<selection>",
                        help="Atom selection mask for stripped residues. New prmtop "
                             "will be saved as <psf>_stripped.prmtop")

    parser.add_argument("--base-directory",
                        dest="basedir",
                        default=os.getcwd(),
                        metavar="<basedir>",
                        help="Replicates will be found from this directory.")

    parser.add_argument("-p",
                        "--psf",
                        dest="psf",
                        default="system.psf",
                        type=str,
                        metavar="<psf>",
                        help="PSF file for simulated system")

    # Option to submit as slurm job
    parser.add_argument("--ntasks",
                        dest="ntasks",
                        default=0,
                        type=int,
                        metavar="<slurm tasks>",
                        help="Run in the queue with this many cores")

    # Mdstep vs submit_new choice
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("-r",
                       "--revision",
                       dest="revision",
                       metavar="<revision>",
                       type=str,
                       help="Simulation revision number for submit_new")

    group.add_argument("--mdstep",
                       dest="mdstep",
                       default=False,
                       action="store_true",
                       help="Assume mdstep style: all files in one directory")

    opts = parser.parse_args(sys.argv[1:])

    # Submit as slurm job without ntasks argument so it's not circular
    if opts.ntasks > 0:
        idx = sys.argv.index("--ntasks")
        newargs = " ".join(sys.argv[:idx] + sys.argv[idx+2:])
        print(" ".join(["sbatch", "-p", "rondror",
                                   "--tasks=%d" % opts.ntasks,
                                   "--cpus-per-task=1",
                                   "--job-name=reimage",
                                   "--time=2:00:00",
                                   "--wrap=\"%s\"" % newargs
                                   ]))
        subprocess.call(" ".join(["sbatch", "-p", "rondror",
                                   "--tasks=%d" % opts.ntasks,
                                   "--cpus-per-task=1",
                                   "--job-name=reimage",
                                   "--time=2:00:00",
                                   "--wrap=\"%s\"" % newargs
                                   ]), shell=True)
        sys.exit(0)

    if opts.mdstep:
        reimage_mdstep(basedir=opts.basedir,
                       skip=opts.skip,
                       alleq=opts.alleq,
                       align=opts.align,
                       stripmask=opts.strip)
    else:
        reimage(basedir=opts.basedir,
                psf=opts.psf,
                revision=opts.revision,
                skip=opts.skip,
                alleq=opts.alleq,
                align=opts.align,
                stripmask=opts.strip)
