#!/usr/bin/env python
"""
Does reimaging as a standalone python script
"""
import argparse
import os
import sys
from beak.reimagers import reimage

if __name__ == "__main__":
    # Process args
    parser = argparse.ArgumentParser(prog="reimage")
    parser.add_argument("-p", "--psf", dest="psf", metavar="<psf>", type=str,
                        required=True, help="PSF file for simulated system")
    parser.add_argument("-r", "--revision", dest="revision",
                        metavar="<revision>", type=str, required=True,
                        help="Simulation revision number")
    parser.add_argument("--every", dest="skip", metavar="<N>",
                        type=int, default=1, help="Save every Nth frame. Defaults"
                        " to all frames")
    parser.add_argument("--equilibration", dest="alleq", default=False,
                        action="store_true", help="Include equilibration trajectories "
                        "in final reimaged file. Defaults to False.")
    parser.add_argument("--align", dest="align", default=False,
                        action="store_true", help="Align frames to input coordinates. "
                        "Defaults to false.")
    parser.add_argument("--strip", dest="strip", type=str, default=None,
                        metavar="<selection>",
                        help="Atom selection mask for stripped residues. New prmtop "
                             "will be saved as <psf>_stripped.prmtop")

    opts = parser.parse_args(sys.argv[1:])

    os.environ["PATH"] = "%s:%s" % (os.path.join(os.environ["PI_HOME"], "software",
                                                 "amber_dev", "bin"), os.environ["PATH"])
    os.environ["AMBERHOME"] = os.path.join(os.environ["PI_HOME"], "software", "amber_dev")
    reimage(psf=opts.psf,
            revision=opts.revision,
            skip=opts.skip,
            alleq=opts.alleq,
            align=opts.align,
            stripmask=opts.strip)

